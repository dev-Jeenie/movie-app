{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","slice","map","genre","index","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sQAiCeA,MA5Bf,YAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,aAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,aAAd,SAA4BL,IAC5B,oBAAGK,UAAU,gBAAb,UAA8BH,EAAQM,MAAM,EAAG,KAA/C,SACA,oBAAIH,UAAU,SAAd,SACGD,EAAOK,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAgBN,UAAU,eAA1B,SACGK,GADMC,eCVfC,E,4MAOJC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,yDANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAMZM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAAER,OAAQA,EAAQD,WAAW,IAVjC,2C,uDAuBZ,WAEEU,KAAKR,c,oBAMP,WACE,MAA8BQ,KAAKX,MAA3BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAInB,OACE,8BACGD,EACC,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGU,EAAON,KAAI,SAACgB,GAAD,OACV,cAAC,EAAD,CAEE1B,GAAI0B,EAAM1B,GACVC,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAMC,mBACdtB,OAAQqB,EAAMrB,QANTqB,EAAM1B,e,GA1DT4B,IAAMC,WA0EThB,IC3EfiB,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,a","file":"static/js/main.721406d7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\n// state가 필요없을 경우, class 컴포넌트를 쓸 필요 없다\nfunction Movie({ id, year, title, summary, poster, genres }) {\n  return (\n    <div className=\"movie\">\n      <img src={poster} alt={title} title={title} />\n      <div className=\"movie_data\">\n        <h3 className=\"movie_title\">{title}</h3>\n        <h5 className=\"movie_year\">{year}</h5>\n        <p className=\"movie_summary\">{summary.slice(0, 180)}...</p>\n        <ul className=\"genres\">\n          {genres.map((genre, index) => (\n            <li key={index} className=\"genres_genre\">\n              {genre}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./Movie.css\";\n\nclass App extends React.Component {\n  /**\n   * 순서\n   * 1. isLoading: true이기 때문에 Loading이 랜더\n   * 2. application이 마운트(태어남)되자마자 componentDidMount, getMovies를 호출\n   * 3. getMovies는 axios.get을 사용하지만 시간이 필요해서 await를 넣음.\n   *  */\n  state = {\n    isLoading: true,\n    movies: [],\n    // 이곳에 쓰는 future state는 필수가 아님\n  };\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts.mx/api/v2/list_movies.json?sort_by=rating\"\n    );\n    // console.log(movies.data.data.movies); 이건 너무 기니까 es6의 문법으로 축약\n    console.log(movies);\n    this.setState({ movies: movies, isLoading: false }); //state의 movie: axios의 movie\n    // axios가 데이터를 가져오면 isLoading에 false를 전달\n\n    /** axios.get는 시간이 걸린다. 기다리라고 전해줘야함.\n     * async = \"너는 비동기야 = 넌 기다려야해\"\n     * 뭐를 기다려?\n     * await axios.get = axios를 기다려\n     * => await 끝날때까지 기다렸다가 계속해라!\n     * 의존성이 있을때 어싱크를 쓴다. 데이터를 받아오고 보여주는 올 때까지 안보여주다가 나오면 딱 보이게\n     * 신청하기같은걸 눌렀어 그럼 완료알림이 뜨는데 비동기처리가 안되어있으면 그냥 바로 신청완료알림이 뜨는것\n     * 그래서 기다리라고 하는거다\n     */\n  };\n  componentDidMount() {\n    // 컴포넌트가 업데이트 되었다면 getMovies를 실행해라\n    this.getMovies();\n    // setTimeout(() => {\n    //   this.setState({ isLoading: false, book: true });\n    //   // state에 있는 것들이 필수가 아니기때문에 book처럼 state를 추가해도 괜찮다\n    // }, 2000);\n  }\n  render() {\n    const { isLoading, movies } = this.state;\n    // isLoading을 this의 state에서 객체구조분해해서 가져온다\n    // return <div>{this.state.isLoading ? \"Loading\" : \"We are ready\"}</div>;\n    // this.state.isLoading을 다 쓰지 않고\n    return (\n      <div>\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader_text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// https://yts.mx/api\n// https://yts.mx/api/v2/list_movies.json 로 (니꼬가 만든것)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('potato'));\n\n"],"sourceRoot":""}